package com.epam.java.rt.lab.dao;

import com.epam.java.rt.lab.dao.sql.Sql;
import com.epam.java.rt.lab.dao.sql.WildValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.FileInputStream;
import java.io.InputStream;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.sql.*;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.atomic.AtomicInteger;

/**
 * category-ms
 */
public class DaoStatement implements AutoCloseable {

    private static final Logger LOG = LoggerFactory.getLogger(Dao.class);

    private static AtomicInteger mapReady = new AtomicInteger(0);
    private static Map<Type, Method> statementMethodMap;

    private PreparedStatement statement;

    public DaoStatement(Connection connection, Sql sql, int autoGeneratedKeys)
            throws SQLException, NoSuchMethodException, DaoException {
        initStatementMethodMap();
        this.statement = connection.prepareStatement(sql.create(), autoGeneratedKeys);
        setValues(sql.getWildValueList());
    }

    private void initStatementMethodMap() throws NoSuchMethodException {
        do {
            if (DaoStatement.mapReady.compareAndSet(0, -1)) {
                try {
                    DaoStatement.statementMethodMap = new HashMap<>();
                    DaoStatement.statementMethodMap.put(int.class, PreparedStatement.class.getMethod("setInt", int.class, int.class));
                    DaoStatement.statementMethodMap.put(Integer.class, PreparedStatement.class.getMethod("setInt", int.class, int.class));
                    DaoStatement.statementMethodMap.put(boolean.class, PreparedStatement.class.getMethod("setBoolean", int.class, boolean.class));
                    DaoStatement.statementMethodMap.put(Boolean.class, PreparedStatement.class.getMethod("setBoolean", int.class, boolean.class));
                    DaoStatement.statementMethodMap.put(byte.class, PreparedStatement.class.getMethod("setByte", int.class, byte.class));
                    DaoStatement.statementMethodMap.put(Byte.class, PreparedStatement.class.getMethod("setByte", int.class, byte.class));
                    DaoStatement.statementMethodMap.put(short.class, PreparedStatement.class.getMethod("setShort", int.class, short.class));
                    DaoStatement.statementMethodMap.put(Short.class, PreparedStatement.class.getMethod("setShort", int.class, short.class));
                    DaoStatement.statementMethodMap.put(long.class, PreparedStatement.class.getMethod("setLong", int.class, long.class));
                    DaoStatement.statementMethodMap.put(Long.class, PreparedStatement.class.getMethod("setLong", int.class, long.class));
                    DaoStatement.statementMethodMap.put(BigDecimal.class, PreparedStatement.class.getMethod("setBigDecimal", int.class, BigDecimal.class));
                    DaoStatement.statementMethodMap.put(double.class, PreparedStatement.class.getMethod("setDouble", int.class, double.class));
                    DaoStatement.statementMethodMap.put(Double.class, PreparedStatement.class.getMethod("setDouble", int.class, double.class));
                    DaoStatement.statementMethodMap.put(float.class, PreparedStatement.class.getMethod("setFloat", int.class, float.class));
                    DaoStatement.statementMethodMap.put(Float.class, PreparedStatement.class.getMethod("setFloat", int.class, float.class));
//                    statementMethodMap.put(Time.class, PreparedStatement.class.getMethod("setTime", int.class, Time.class));
//                    statementMethodMap.put(Date.class, PreparedStatement.class.getMethod("setDate", int.class, Date.class));
                    DaoStatement.statementMethodMap.put(Timestamp.class, PreparedStatement.class.getMethod("setTimestamp", int.class, Timestamp.class));
                    DaoStatement.statementMethodMap.put(String.class, PreparedStatement.class.getMethod("setString", int.class, String.class));
                    DaoStatement.statementMethodMap.put(Blob.class, PreparedStatement.class.getMethod("setBlob", int.class, Blob.class));
                    DaoStatement.statementMethodMap.put(Clob.class, PreparedStatement.class.getMethod("setClob", int.class, Clob.class));
                    DaoStatement.statementMethodMap.put(FileInputStream.class, PreparedStatement.class.getMethod("setBinaryStream", int.class, InputStream.class));
                    DaoStatement.mapReady.set(1);
                } finally {
                    DaoStatement.mapReady.set(-2);
                }
            }
        } while (DaoStatement.mapReady.get() == -1);
    }

    private <T> void setValue(int setIndex, T setValue)
            throws DaoException {
        try {
            if (setValue == null) {
                this.statement.setNull(setIndex, Types.NULL);
            } else {
                Method method = DaoStatement.statementMethodMap.get(setValue.getClass());
                if (method == null)
                    throw new DaoException("exception.dao.jdbc.dao-statement.set-statement-value.get-method");
                method.invoke(this.statement, setIndex, setValue);
            }
        } catch (IllegalAccessException | SQLException | InvocationTargetException e) {
            throw new DaoException("exception.dao.jdbc.dao-statement.set-statement-value.get-invoke-method", e.getCause());
        }
    }

    public void setValues(List<WildValue> wildValueList) throws DaoException {
        int setIndex = 0;
        for (WildValue wildValue : wildValueList) {
            setIndex++;
            setValue(setIndex, wildValue.getVal());
        }
    }

    public int executeUpdate() throws SQLException {
        return this.statement.executeUpdate();
    }

    public ResultSet executeQuery() throws SQLException {
        return this.statement.executeQuery();
    }

    public ResultSet getGeneratedKeys() throws SQLException {
        return this.statement.getGeneratedKeys();
    }

    @Override
    public void close() throws Exception {
        this.statement.close();
    }
}
