package com.epam.java.rt.lab.dao;

import com.epam.java.rt.lab.dao.sql.Sql;
import com.epam.java.rt.lab.dao.sql.WildValue;
import com.epam.java.rt.lab.exception.AppException;

import java.io.FileInputStream;
import java.io.InputStream;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.sql.*;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.atomic.AtomicInteger;

import static com.epam.java.rt.lab.dao.DaoExceptionCode.*;
import static com.epam.java.rt.lab.exception.AppExceptionCode.NULL_NOT_ALLOWED;

public class DaoStatement implements AutoCloseable {

    private static final AtomicInteger mapReady = new AtomicInteger(0);
    private static Map<Type, Method> statementMethodMap;

    private PreparedStatement statement;

    public DaoStatement() {

    }

    public static DaoStatement create(Connection connection,
                                      Sql sql, int autoGeneratedKeys)
            throws AppException {
        if (connection == null || sql == null) {
            throw new AppException(NULL_NOT_ALLOWED);
        }
        try {
            DaoStatement daoStatement = new DaoStatement();
            daoStatement.statement = connection.
                    prepareStatement(sql.create(), autoGeneratedKeys);
            daoStatement.setValues(sql.getWildValueList());
            return daoStatement;
        } catch (SQLException e) {
            throw new AppException(DAO_STATEMENT_ERROR,
                    e.getMessage(), e.getCause());
        }
    }

    public static void initStatementMethodMap() throws AppException {
        do {
            if (DaoStatement.mapReady.compareAndSet(0, -1)) {
                try {
                    DaoStatement.statementMethodMap = new HashMap<>();
                    DaoStatement.statementMethodMap.put(int.class,
                            PreparedStatement.class.getMethod("setInt",
                                    int.class, int.class));
                    DaoStatement.statementMethodMap.put(Integer.class,
                            PreparedStatement.class.getMethod("setInt",
                                    int.class, int.class));
                    DaoStatement.statementMethodMap.put(boolean.class,
                            PreparedStatement.class.getMethod("setBoolean",
                                    int.class, boolean.class));
                    DaoStatement.statementMethodMap.put(Boolean.class,
                            PreparedStatement.class.getMethod("setBoolean",
                                    int.class, boolean.class));
                    DaoStatement.statementMethodMap.put(byte.class,
                            PreparedStatement.class.getMethod("setByte",
                                    int.class, byte.class));
                    DaoStatement.statementMethodMap.put(Byte.class,
                            PreparedStatement.class.getMethod("setByte",
                                    int.class, byte.class));
                    DaoStatement.statementMethodMap.put(short.class,
                            PreparedStatement.class.getMethod("setShort",
                                    int.class, short.class));
                    DaoStatement.statementMethodMap.put(Short.class,
                            PreparedStatement.class.getMethod("setShort",
                                    int.class, short.class));
                    DaoStatement.statementMethodMap.put(long.class,
                            PreparedStatement.class.getMethod("setLong",
                                    int.class, long.class));
                    DaoStatement.statementMethodMap.put(Long.class,
                            PreparedStatement.class.getMethod("setLong",
                                    int.class, long.class));
                    DaoStatement.statementMethodMap.put(BigDecimal.class,
                            PreparedStatement.class.getMethod("setBigDecimal",
                                    int.class, BigDecimal.class));
                    DaoStatement.statementMethodMap.put(double.class,
                            PreparedStatement.class.getMethod("setDouble",
                                    int.class, double.class));
                    DaoStatement.statementMethodMap.put(Double.class,
                            PreparedStatement.class.getMethod("setDouble",
                                    int.class, double.class));
                    DaoStatement.statementMethodMap.put(float.class,
                            PreparedStatement.class.getMethod("setFloat",
                                    int.class, float.class));
                    DaoStatement.statementMethodMap.put(Float.class,
                            PreparedStatement.class.getMethod("setFloat",
                                    int.class, float.class));
                    DaoStatement.statementMethodMap.put(Timestamp.class,
                            PreparedStatement.class.getMethod("setTimestamp",
                                    int.class, Timestamp.class));
                    DaoStatement.statementMethodMap.put(String.class,
                            PreparedStatement.class.getMethod("setString",
                                    int.class, String.class));
                    DaoStatement.statementMethodMap.put(Blob.class,
                            PreparedStatement.class.getMethod("setBlob",
                                    int.class, Blob.class));
                    DaoStatement.statementMethodMap.put(Clob.class,
                            PreparedStatement.class.getMethod("setClob",
                                    int.class, Clob.class));
                    DaoStatement.statementMethodMap.put(FileInputStream.class,
                            PreparedStatement.class.getMethod("setBinaryStream",
                                    int.class, InputStream.class));
                    DaoStatement.mapReady.set(1);
                } catch (NoSuchMethodException e) {
                    throw new AppException(DAO_STATEMENT_NOT_FOUND,
                            e.getMessage(), e.getCause());
                } finally {
                    DaoStatement.mapReady.set(-2);
                }
            }
        } while (DaoStatement.mapReady.get() == -1);
    }

    private <T> void setValue(int setIndex, T setValue)
            throws AppException {
        try {
            if (setValue == null) {
                this.statement.setNull(setIndex, Types.NULL);
            } else {
                Method method = DaoStatement.statementMethodMap.
                        get(setValue.getClass());
                if (method == null) {
                    String[] detailArray =
                            {setValue.getClass().getSimpleName()};
                    throw new AppException(DAO_STATEMENT_METHOD_NOT_FOUND,
                            detailArray);
                }
                method.invoke(this.statement, setIndex, setValue);
            }
        } catch (IllegalAccessException | SQLException
                | InvocationTargetException e) {
            throw new AppException(DAO_STATEMENT_METHOD_CALL_ERROR,
                    e.getMessage(), e.getCause());
        }
    }

    public void setValues(List<WildValue> wildValueList) throws AppException {
        if (wildValueList == null) throw new AppException(NULL_NOT_ALLOWED);
        int setIndex = 0;
        for (WildValue wildValue : wildValueList) {
            setIndex++;
            setValue(setIndex, wildValue.getVal());
        }
    }

    public int executeUpdate() throws SQLException {
        return this.statement.executeUpdate();
    }

    public ResultSet executeQuery() throws SQLException {
        return this.statement.executeQuery();
    }

    public ResultSet getGeneratedKeys() throws SQLException {
        return this.statement.getGeneratedKeys();
    }

    @Override
    public void close() throws Exception {
        this.statement.close();
    }

}